% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CumulativeDistributionFunctions.R
\name{coverage-functions}
\alias{coverage-functions}
\alias{.getCAGEsignalCoverage}
\alias{.getCumsumChr2}
\alias{.getCumsum}
\title{Private functions behind \code{cumulativeCTSSdistribution}}
\usage{
.getCAGEsignalCoverage(ctss.chr, clusters)

.getCumsumChr2(clusters, ctss, chrom, str)

.getCumsum(ctss, clusters, use.multicore = FALSE, nrCores = NULL)
}
\arguments{
\item{ctss.chr}{A CTSS.chr object (guaranteed to have only one chromosome).}

\item{clusters}{A GRanges object}

\item{ctss}{GRanges as per \code{CTSScoordinatesGR}, with the score of one sample.}

\item{chrom}{a chromosome name}

\item{str}{a strand name}

\item{useMulticore, nrCores}{See clusterCTSS.}

\item{clusters}{GRanges as per \code{getTagClusterGR}.}
}
\value{
\code{.getCumsum} returns a list of Rle vectors (IRanges package) containing cumulative
sum for each cluster (length of list is equal to number of clusters and names of the list
components corespond to the name of the corresponding cluster) v.
}
\description{
\code{.getCumsum} calculates cumulative sums of tpm along the clusters.
}
\details{
\code{.getCAGEsignalCoverage} does...
Note that strand is not taken into account.

\code{.getCumsumChr2}
}
\examples{
ctss <- CAGEr:::.CTSS(GRanges(seqnames=Rle("chr1"), IRanges(c(1,3,4,12,14,25,28,30), w=1), strand = "+"))
score(ctss) <- 1
ctss.chr <- CAGEr:::.CTSS.chr(ctss)
clusters <- GRanges(seqnames = Rle("chr1"), ranges = IRanges(c(1,12,25), c(4,14,28)), strand = "+")
chrom <- "chr1"
str <- "+"
.getCAGEsignalCoverage(ctss.chr, clusters)
.getCumsumChr2(clusters, ctss, chrom, str)
load(system.file("data", "exampleCAGEset.RData", package="CAGEr"))
ctss      <- CAGEr:::.CTSS(CTSSnormalizedTpmGR(exampleCAGEset, "sample1"))
ctss      <- ctss[ctss$filteredCTSSidx]
clusters  <- CAGEr:::getTagClusterGR(exampleCAGEset, "sample1")
clusters.cumsum <- .getCumsum(ctss, clusters)
identical(lapply(exampleCAGEset@CTSScumulativesTagClusters[[1]],decode), lapply(clusters.cumsum, decode))
# Not identical if not decoded because Rle method is attached to S4Vectors in one case
# and to IRanges in the other case.
decode(clusters.cumsum[[1]])
ctss[queryHits(findOverlaps(ctss, clusters[1]))]
clusters[1]

ce <- readRDS(system.file(package = "CAGEr", "extdata/CAGEexp.rds"))
normalizeTagCount(ce)
clusterCTSS( object = ce, threshold = 50, thresholdIsTpm = TRUE
           , nrPassThreshold = 1, method = "distclu", maxDist = 20
           , removeSingletons = TRUE, keepSingletonsAbove = 100)
ctss      <- CAGEr:::.CTSS(CTSSnormalizedTpmGR(ce, "Zf.30p.dome"))
ctss      <- ctss[ctss$filteredCTSSidx]
clusters  <- CAGEr:::getTagClusterGR(ce, "Zf.30p.dome")
clusters.cumsum <- .getCumsum(ctss, head(clusters))
decode(clusters.cumsum[[1]])
ctss[queryHits(findOverlaps(ctss, clusters[1]))]
clusters[1]
}
